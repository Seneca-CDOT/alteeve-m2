#!/usr/bin/perl

use strict;
use warnings;
use AN::Tools;
no warnings 'recursion';

# Disable buffering.
$| = 1;

my $THIS_FILE           =  ($0 =~ /^.*\/(.*)$/)[0];
my $running_directory   =  ($0 =~ /^(.*?)\/$THIS_FILE$/)[0];
if (($running_directory =~ /^\./) && ($ENV{PWD}))
{
	$running_directory =~ s/^\./$ENV{PWD}/;
}

my $an = AN::Tools->new({data => 
	{
		path		=>	{
			log_file            =>  "/var/log/ScanCore.log",
			striker_config		=>	"/etc/striker/striker.conf",
		},
		sys			=>	{
			log_db_transactions	=>	0,
			log_language		=>	"en_CA",
			log_level		    =>	2,
		},
	}
});

# Read the config file
$an->Storage->read_conf({file => $an->data->{path}{striker_config}});

# Set some defaults
$an->default_language    ($an->data->{sys}{language});
$an->default_log_language($an->data->{sys}{log_language});
$an->default_log_file($an->data->{path}{log_file});
$an->Log->level($an->data->{sys}{log_level});

# Set the log level.
$an->Log->db_transactions(1) if $an->data->{$THIS_FILE}{log_db_transactions};

# Read in strings now.
$an->Storage->read_words({file => $an->data->{path}{scancore_strings}});
$an->Storage->read_words({file => $an->data->{path}{striker_strings}});

$an->Get->switches();

my $decision_parameters = {
	external => 1
};

if ($an->data->{switches}{decision} && $an->data->{switches}{decision} =~ /^[0-9]+$/)
{
    $decision_parameters->{decision} = $an->data->{switches}{decision};
}
else
{
    print "Invalid decision; it must be a positive integer."."\n";
    exit(1);
}

# node-uuid flag is not required
if ($an->data->{switches}{'node-uuid'})
{
    if ($an->data->{switches}{'node-uuid'} =~ /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)
    {
        $decision_parameters->{node_uuid} = $an->data->{switches}{'node-uuid'};
    }
    else
    {
        print "The format of node UUID cannot be recognized."."\n";
        exit(1);
    }
}

$an->Log->entry({log_level => 2, message_key => "an_variables_0002", message_variables => {
    name1 => "decision_parameters::decision",   value1 => $decision_parameters->{decision},
    name2 => "decision_parameters::node_uuid",  value2 => $decision_parameters->{node_uuid},
}, file => $THIS_FILE, line => __LINE__});

# Get host_uuid
$an->Get->uuid({get => 'host_uuid'}) if not $an->data->{sys}{host_uuid};

# Connect to the database(s).
my $connections = $an->DB->connect_to_databases({file => $THIS_FILE});
$an->Log->entry({log_level => 2, message_key => "an_variables_0001", message_variables => {
	name1 => "connections", value1 => $connections,
}, file => $THIS_FILE, line => __LINE__});
if (not $connections)
{
	print "[ Error ] - Failed to connect to the ScanCore database. Is postgres running?\n";
	exit(4);
}

$an->Action->decide($decision_parameters);
