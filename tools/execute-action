#!/usr/bin/perl

use strict;
use warnings;
use AN::Tools;
no warnings 'recursion';

# Disable buffering.
$| = 1;

my $THIS_FILE = ($0 =~ /^.*\/(.*)$/)[0];
my $N_HOSTS = 2;
my $N_ACTIONS = 3;
my @ACTION_NAME_LIST = (
	"assume",
	"down",
	"up"
);
my $ACTION_ARRAY_LENGTH = $N_HOSTS * $N_ACTIONS;

my $an = AN::Tools->new({
	data => {
		path => {
			striker_config => "/etc/striker/striker.conf",
		},
	}
});

# Read the config file
$an->Storage->read_conf({file => $an->data->{path}{striker_config}});

$an->Get->switches();

if (not $an->data->{switches}{action})
{
	print "Missing action code or number."."\n";

	$an->nice_exit({exit_code => 1});
}

# Maybe the given action parameter is not a number; try converting it.
if (not $an->data->{switches}{action} =~ /^[0-9]+$/)
{
	$an->data->{switches}{action} = convert_action_code_to_number({
		action_code	=>	$an->data->{switches}{action}
	});
}

if ($an->data->{switches}{action} < 1
	or $an->data->{switches}{action} > $N_ACTIONS)
{
	print "Unrecognizable action; should be between 1 and "
		.$N_ACTIONS
		." or one of "
		.join(
			", ",
			map {
				uc(
					substr($_, 0, 1)
				);
			} @ACTION_NAME_LIST
		)
		."."
		."\n";

	$an->nice_exit({exit_code => 1});
}

if ((not $an->data->{switches}{node})
	and (not $an->data->{switches}{'node-uuid'}))
{
	print "Missing node number or UUID."."\n";

	$an->nice_exit({exit_code => 1});
}

if ($an->data->{switches}{node}
	and ($an->data->{switches}{node} < 1
		or $an->data->{switches}{node} > $N_HOSTS))
{
	print "Unrecognizable node; should be between 1 and ".$N_HOSTS."."."\n";

	$an->nice_exit({exit_code => 1});
}

if ($an->data->{switches}{'record-only'})
{
	$an->data->{switches}{record} = $an->data->{switches}{'record-only'};
}

# ----- Begin function section

sub print_hash
{
	my $parameter = shift;

	if ($parameter->{print_hash_message_prefix})
	{
		print $parameter->{print_hash_message_prefix}."\n";

		delete $parameter->{print_hash_message_prefix};
	}

	foreach my $key (keys %{$parameter})
	{
		my $value = $parameter->{$key} ? $parameter->{$key} : "";

		print "$key: [$value]"."\n";
	}
}

sub convert_action_code_to_number
{
	my $parameter = shift;

	if (not $parameter->{action_code})
	{
		return;
	}

	my $action_number = 0;

	if (uc($parameter->{action_code}) eq "A")
	{
		$action_number = 1;
	}
	elsif (uc($parameter->{action_code}) eq "D")
	{
		$action_number = 2;
	}
	elsif (uc($parameter->{action_code}) eq "U")
	{
		$action_number = 3;
	}

	return $action_number;
}

sub convert_node_number_to_node_uuid
{
	my $parameter = shift;

	if (not $parameter->{node})
	{
		return;
	}

	my $get_node_uuid_query = "
SELECT nodes.node_uuid
FROM public.hosts hosts
INNER JOIN public.nodes nodes
	ON hosts.host_uuid = nodes.node_host_uuid
WHERE hosts.host_name LIKE 'an-a%n%".$parameter->{node}."%';";

	print_hash({
		get_node_uuid_query	=>	$get_node_uuid_query,
	});

	my $node_uuid = $an->DB->do_db_query({
		query	=>	$get_node_uuid_query,
		source	=>	$THIS_FILE,
		line	=>	__LINE__
	})->[0]->[0];

	return $node_uuid;
}

sub convert_node_uuid_to_node_number
{
	my $parameter = shift;

	if (not $parameter->{node_uuid})
	{
		return;
	}

	if (not $parameter->{node_uuid} =~ /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)
	{
		print "Format of the provided Node UUID is invalid."."\n";

		return;
	}

	my $get_node_number_query = "
SELECT CAST(
	SUBSTRING(
		hosts.host_name,
		'n([0-9]+)'
	) AS int
)
FROM public.hosts hosts
INNER JOIN public.nodes nodes
	ON hosts.host_uuid = nodes.node_host_uuid
WHERE nodes.node_uuid = '".$parameter->{node_uuid}."';";

	print_hash({
		get_node_number_query	=>	$get_node_number_query,
	});

	my $node_number = $an->DB->do_db_query({
		query	=>	$get_node_number_query,
		source	=>	$THIS_FILE,
		line	=>	__LINE__
	})->[0]->[0];

	return $node_number;
}

sub convert_action_and_node_number_to_action_array
{
	my $parameter = shift;

	if (not $parameter->{action})
	{
		return;
	}

	if (not $parameter->{node})
	{
		return;
	}

	my @action_array;

	if (($parameter->{action_array})
		and (scalar @{$parameter->{action_array}} == $ACTION_ARRAY_LENGTH))
	{
		@action_array = @{$parameter->{action_array}};
	}
	else
	{
		@action_array = (0) x $ACTION_ARRAY_LENGTH;
	}

	my $node_index = $parameter->{node} - 1;

	my $index_to_set = ($node_index * $N_ACTIONS) + $parameter->{action} - 1;

	$action_array[$index_to_set] = 1;

	return @action_array;
}

sub record_action
{
	my $parameter = shift;

	if (not $parameter->{action_array})
	{
		return;
	}

	if (not $parameter->{n_hosts})
	{
		return;
	}

	if (not $parameter->{action_name_list})
	{
		return;
	}

	if (scalar @{$parameter->{action_array}} != $ACTION_ARRAY_LENGTH)
	{
		print "Action array length does not match the expected length of ".$ACTION_ARRAY_LENGTH."."."\n";

		return;
	}

	my $record_action_query = "
INSERT INTO
	history.actions
(
	uuid,
	host_uuid,
	".join(",",
		map {
			my $node_prefix = "node_".$_."_";

			map {
				$node_prefix.$_
			} @{$parameter->{action_name_list}}
		} 1..$parameter->{n_hosts}
	).",
	modified_date
) VALUES (
	".$an->data->{sys}{use_db_fh}->quote($an->Get->uuid()).",
	".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{host_uuid}).",
	".join(",",
		map {
			$an->data->{sys}{use_db_fh}->quote($_)
		} @{$parameter->{action_array}}
	).",
	".$an->data->{sys}{use_db_fh}->quote($an->data->{sys}{db_timestamp})."
);";

	print_hash({
		record_action_query	=>	$record_action_query,
	});

	$an->DB->do_db_write({
		query	=>	$record_action_query,
		source	=>	$THIS_FILE,
		line	=>	__LINE__
	});
}

# ----- End function section

my $connections = $an->DB->connect_to_databases({file => $THIS_FILE});

if ($an->data->{switches}{'node-uuid'})
{
	$an->data->{switches}{node} = convert_node_uuid_to_node_number({
		node_uuid	=>	$an->data->{switches}{'node-uuid'},
	});
}
else
{
	$an->data->{switches}{'node-uuid'} = convert_node_number_to_node_uuid({
		node	=>	$an->data->{switches}{node},
	});
}

print_hash({
	action			=>	$an->data->{switches}{action},
	node			=>	$an->data->{switches}{node},
	'node-uuid'		=>	$an->data->{switches}{'node-uuid'},
	csv 			=>	$an->data->{switches}{csv},
	record			=>	$an->data->{switches}{record},
	'record-only'	=>	$an->data->{switches}{'record-only'},
});

if ($an->data->{switches}{record})
{
	my @action_array;

	if ($an->data->{switches}{csv})
	{
		@action_array = split(",", $an->data->{switches}{csv});
	}
	else
	{
		@action_array = convert_action_and_node_number_to_action_array({
			action	=>	$an->data->{switches}{action},
			node	=>	$an->data->{switches}{node},
		});
	}

	print_hash({
		action_array	=>	join(",", @action_array),
	});

	record_action({
		action_array		=>	[ @action_array ],
		n_hosts				=>	$N_HOSTS,
		action_name_list	=>	[ @ACTION_NAME_LIST ],
	});

	if ($an->data->{switches}{'record-only'})
	{
		$an->nice_exit({exit_code => 0});
	}
}

# Only executed when host is a Node.
#
# Migrate all servers to this Node.
if ($an->data->{switches}{action} == 1)
{
	$an->Striker->load_anvil({anvil_uuid => $an->data->{sys}{anvil_uuid}});

	my $node_name = $an->hostname;
	my $peer_key  = $an->data->{sys}{node_name}{$node_name}{peer_node_key};
	my $peer_name = $an->data->{sys}{anvil}{$peer_key}{name};

	print_hash({
		node_name	=>	$node_name,
		peer_key	=>	$peer_key,
		peer_name	=>	$peer_name,
	});

	my $shell_call = $an->data->{path}{clustat};

	print_hash({
		shell_call	=>	$shell_call,
	});

	if (open (my $clustat_out_file_handle, $shell_call." 2>&1 |"))
	{
		while(<$clustat_out_file_handle>)
		{
			chomp;

			my $line =  $_;

			$line =~ s/\s+/ /g;
			$line =~ s/^\s+//;
			$line =~ s/\s+$//;

			print_hash({
				line	=>	$line,
			});

			if ($line =~ /^vm:(.*?) (.*?) (.*)/)
			{
				my $server = $1;
				my $host   = $2;
				my $state  = $3;

				print_hash({
					server	=>	$server,
					host	=>	$host,
					state	=>	$state,
				});

				if (($host eq $peer_name) && ($state eq "started"))
				{
					my $shell_call = $an->data->{path}{'anvil-migrate-server'}." --server $server; ".$an->data->{path}{'echo'}." return_code:\$?";

					print_hash({
						shell_call	=>	$shell_call,
					});

					if (open (my $anvil_migrate_server_out_file_handle, $shell_call." 2>&1 |"))
					{
						while(<$anvil_migrate_server_out_file_handle>)
						{
							chomp;

							my $line = $_;

							print_hash({
								line	=>	$line,
							});

							if ($line =~ /return_code:(\d+)$/)
							{
								my $return = $1;

								print_hash({
									return	=>	$return,
								});
							}
						}

						close $anvil_migrate_server_out_file_handle;
					}
					else
					{
						print_hash({
							print_hash_message_prefix	=>	"Failed to call:",
							shell_call					=>	$shell_call,
							error						=>	$!,
						});

						$an->nice_exit({exit_code => 2});
					}
				}
			}
		}

		close $clustat_out_file_handle;
	}
	else
	{
		print_hash({
			print_hash_message_prefix	=>	"Failed to call:",
			shell_call					=>	$shell_call,
			error						=>	$!,
		});

		$an->nice_exit({exit_code => 2});
	}
}
# Only executed when host is a Node.
#
# Shut down this Node.
elsif ($an->data->{switches}{action} == 2)
{
	my $shell_call = $an->data->{path}{'anvil-safe-stop'}." --local --suicide";

	print_hash({
		shell_call	=>	$shell_call,
	});

	if (open(my $anvil_safe_stop_out_file_handle, "$shell_call 2>&1 |"))
	{
		while (<$anvil_safe_stop_out_file_handle>)
		{
			chomp;

			my $line = $_;

			$line =~ s/\n//g;
			$line =~ s/\r//g;

			print_hash({
				line	=>	$line,
			});
		}

		close $anvil_safe_stop_out_file_handle;
	}
	else
	{
		print_hash({
			print_hash_message_prefix	=>	"Failed to call:",
			shell_call					=>	$shell_call,
			error						=>	$!,
		});

		$an->nice_exit({exit_code => 2});
	}
}
# Only executed when host is a Striker.
#
# Boot the Node specified by the node flag.
elsif ($an->data->{switches}{action} == 3)
{
	my $state = $an->ScanCore->target_power({
		target	=> $an->data->{switches}{'node-uuid'},
		task	=> "on",
	});

	print_hash({
		state	=>	$state,
	});
}
